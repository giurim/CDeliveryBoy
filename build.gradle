buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'    //for plugin-publish-plugin
        }
    }
    dependencies {
        classpath 'info.solidsoft.gradle:cdeliveryboy:0.7.0'
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.7'
        classpath 'com.toomuchcoding:uptodate-gradle-plugin:1.0.1'
        classpath "gradle.plugin.com.palantir.ideatestfix:gradle-idea-test-fix:0.1.0"
    }
}

apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.toomuchcoding.uptodate'
apply plugin: "com.palantir.idea-test-fix"
apply plugin: 'info.solidsoft.cdeliveryboy'

cDeliveryBoy {
    tasks {
        promoteRepositoryTask = "releaseRepository"
    }
    nexus {
        autoPromote = true
    }
}

nexusStaging {
    packageGroup = "info.solidsoft"
}

scmVersion {
    hooks {
        pre 'fileUpdate', [file       : 'README.md', pattern: { previousVersion, context -> /classpath\ 'info\.solidsoft\.gradle:cdeliveryboy:$previousVersion'/ },
                           replacement: { currentVersion, context -> "classpath 'info.solidsoft.gradle:cdeliveryboy:$currentVersion'" }]
        pre 'fileUpdate', [file       : 'CHANGELOG.md', pattern: { previousVersion, context -> /^##\ ${context.currentVersion}\ -\ Unreleased$/ },
                           replacement: { currentVersion, context -> "## $currentVersion - ${new Date().format( 'yyyy-MM-dd' )}" }]
    }
}

project.group = "info.solidsoft.gradle"
project.version = scmVersion.version

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    compile 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    compile 'pl.allegro.tech.build:axion-release-plugin:1.7.2'
    compile 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0'

    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        //groovy 2.4.x is already provided by Gradle itself
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testCompile 'net.bytebuddy:byte-buddy:1.7.5'
    testCompile 'org.objenesis:objenesis:2.6'   //for mocking in Spock
    testCompile 'info.solidsoft.spock:spock-global-unroll:0.5.1'
    testCompile 'org.mockito:mockito-core:2.10.0'   //needed for one specific case in BasicProjectBuilderITSpec

    //TODO: Separate functional tests
    testCompile gradleTestKit()
    testCompile('com.netflix.nebula:nebula-test:6.1.2') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testCompile 'com.github.stefanbirkner:system-rules:1.16.0'  //for overriding environment variables in functional tests
    testCompile 'org.ajoberstar:grgit:1.7.2'
}

def repoSlug = 'szpak/cdeliveryboy'
modifyPom {
    project {
        name 'cdeliveryboy'
        description 'CDeliveryBoy - Continuous Delivery for FOSS projects'
        url "https://github.com/$repoSlug"
        inceptionYear '2016'

        scm {
            url "https://github.com/$repoSlug"
            connection "scm:https://github.com/$repoSlug"
            developerConnection "scm:git://github.com/$repoSlug"
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'szpak'
                name 'Marcin ZajÄ…czkowski'
                email 'mszpak ATT wp DOTT pl'
                roles {
                    role 'developer'
                    role 'despot'
                }
            }
        }
    }
}

uploadArchives.dependsOn { check }


if (hasProperty('pluginPortal')) {

    apply plugin: 'com.gradle.plugin-publish'

    pluginBundle {
        website = 'https://github.com/szpak/CDeliveryBoy/'
        vcsUrl = 'https://github.com/szpak/CDeliveryBoy/'

        plugins {
            plugin {
                id = 'info.solidsoft.cdeliveryboy'
                displayName = 'CDeliveryBoy'
                description = 'Continuous Delivery for Gradle-based libraries and tools'
                tags = ['cd', 'continuous-delivery', 'maven-central', 'nexus', 'release']
            }
        }

        mavenCoordinates {
            groupId = project.group
            artifactId = project.name
        }
    }

    publishPlugins {
        onlyIf { ciBuild.isInReleaseMode }
        mustRunAfter releaseRepository
    }
    ciBuild.dependsOn publishPlugins
}

if (hasProperty('changelogSync')) {

    task syncChangelog(type: Exec) {
        doFirst { logger.info("Synchronizing changelog with GitHub for version ${project.version}") }
        commandLine 'chandler', 'push', "release/${project.version}", '--tag-prefix=release/'
    }

    syncChangelog {
        onlyIf { ciBuild.isInReleaseMode }
        mustRunAfter releaseRepository
        if (project.tasks.findByName("publishPlugins")) {
            mustRunAfter publishPlugins
        }
    }
    ciBuild.dependsOn syncChangelog
}
